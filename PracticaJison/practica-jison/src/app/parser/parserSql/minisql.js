/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var minisql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,9],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[9,23,27,32,38],$V6=[6,23,27,32,35,36,37,38],$V7=[1,21],$V8=[1,41],$V9=[1,43],$Va=[1,42],$Vb=[1,25],$Vc=[1,38],$Vd=[1,28],$Ve=[1,34],$Vf=[1,33],$Vg=[1,36],$Vh=[1,37],$Vi=[1,39],$Vj=[1,40],$Vk=[11,16],$Vl=[15,16],$Vm=[1,56],$Vn=[15,16,30,33,48,50,55],$Vo=[1,58],$Vp=[15,16,30,33,48,50,55,57],$Vq=[13,15,16,30,33,48,50,55,57,61,63,64,65,66],$Vr=[1,66],$Vs=[1,67],$Vt=[13,15,16,30,33,48,50,55,57,61,63,64,65,66,67,69],$Vu=[1,68],$Vv=[1,69],$Vw=[13,15,16,30,33,48,50,51,55,57,61,63,64,65,66,67,69,71],$Vx=[16,40],$Vy=[16,30],$Vz=[2,28],$VA=[1,87],$VB=[1,88],$VC=[13,15],$VD=[1,119],$VE=[1,120];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inic":3,"declare_variables":4,"statements":5,"EOF":6,"state_op":7,"declare_prod":8,"DECLARE":9,"variablePro":10,"AS":11,"type":12,"IGUAL":13,"a":14,"PUNTO_COMA":15,"COMA":16,"VARIABLE":17,"INT":18,"DECIMAL":19,"TEXT":20,"BOOLEAN":21,"print_stmt":22,"SET":23,"set_stmt":24,"if_stmt":25,"select_stmt":26,"PRINT":27,"LPARENT":28,"expr":29,"RPARENT":30,"setPro":31,"IF":32,"THEN":33,"else_statement":34,"END":35,"ELSEIF":36,"ELSE":37,"SELECT":38,"name_select":39,"FROM":40,"LITERAL":41,"select":42,"where_pro":43,"limit_pro":44,"off_set_pro":45,"WHERE":46,"where":47,"LIMIT":48,"limit":49,"OFFSET":50,"POR":51,"names_select":52,"INPUT":53,"CADENA":54,"OR":55,"b":56,"AND":57,"c":58,"NOT":59,"d":60,"NO_IGUAL":61,"e":62,"MENOR_QUE":63,"MENOR_IGUAL_QUE":64,"MAYOR_QUE":65,"MAYOR_IGUAL_QUE":66,"MAS":67,"f":68,"MENOS":69,"g":70,"DIVIDE":71,"h":72,"ENTERO":73,"NUM_DECIMAL":74,"FALSE":75,"TRUE":76,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"DECLARE",11:"AS",13:"IGUAL",15:"PUNTO_COMA",16:"COMA",17:"VARIABLE",18:"INT",19:"DECIMAL",20:"TEXT",21:"BOOLEAN",23:"SET",27:"PRINT",28:"LPARENT",30:"RPARENT",32:"IF",33:"THEN",35:"END",36:"ELSEIF",37:"ELSE",38:"SELECT",40:"FROM",41:"LITERAL",46:"WHERE",48:"LIMIT",50:"OFFSET",51:"POR",53:"INPUT",54:"CADENA",55:"OR",57:"AND",59:"NOT",61:"NO_IGUAL",63:"MENOR_QUE",64:"MENOR_IGUAL_QUE",65:"MAYOR_QUE",66:"MAYOR_IGUAL_QUE",67:"MAS",69:"MENOS",71:"DIVIDE",73:"ENTERO",74:"NUM_DECIMAL",75:"FALSE",76:"TRUE"},
productions_: [0,[3,3],[5,2],[5,1],[4,2],[4,1],[8,7],[8,5],[10,3],[10,1],[12,1],[12,1],[12,1],[12,1],[7,1],[7,3],[7,1],[7,2],[22,5],[29,3],[29,1],[24,3],[24,1],[31,3],[25,8],[25,7],[34,5],[34,2],[34,0],[26,5],[42,1],[42,1],[42,1],[42,0],[43,3],[47,1],[47,1],[47,0],[44,2],[49,1],[49,0],[45,2],[39,1],[39,1],[52,3],[52,1],[14,4],[14,3],[14,1],[56,3],[56,1],[58,2],[58,1],[60,3],[60,3],[60,3],[60,3],[60,3],[60,3],[60,1],[62,3],[62,3],[62,1],[68,3],[68,3],[68,1],[70,2],[70,2],[70,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=$$[$0-2]; this.$.push(...$$[$0-1]); return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 5:
 this.$ = []; this.$.push($$[$0])
break;
case 4:
this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 6:
 this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-5],$$[$0-1])
break;
case 7:
 this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0-3])
break;
case 8:
this.$.push($$[$0]); this.$=$$[$0-2]; 
break;
case 9: case 20: case 22:
this.$=[]; this.$.push($$[$0]);
break;
case 10:
 this.$ = yy.VariableType.INT
break;
case 11:
 this.$ = yy.VariableType.DECIMAL
break;
case 12:
 this.$ = yy.VariableType.TEXT
break;
case 13:
 this.$ = yy.VariableType.BOOLEAN
break;
case 14: case 16: case 67:
this.$=$$[$0]
break;
case 15:
 this.$= new yy.Settear(this._$.first_line,this._$.first_column,$$[$0-1])
break;
case 17:
this.$=$$[$0-1]
break;
case 18:
this.$= new yy.Print(this._$.first_line,this._$.first_column,$$[$0-2])
break;
case 19:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 21:
 this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 23:
this.$= new yy.Assingment(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0])
break;
case 24:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-3])
break;
case 25:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-5],$$[$0-3])
break;
case 26:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-3], $$[$0-1], $$[$0])
break;
case 27:
this.$= new yy.ElseState(this._$.first_line,this._$.first_column, $$[$0])
break;
case 47:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.OR,$$[$0-2], $$[$0])
break;
case 48: case 50:
 this.$ = $$[$0]; 
break;
case 49:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.AND,$$[$0-2], $$[$0])
break;
case 51:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.NOT,$$[$0-1], $$[$0])
break;
case 52:
 this.$= $$[$0]
break;
case 53:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.NO_IGUAL,$$[$0-2], $$[$0])
break;
case 54:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOR_QUE,$$[$0-2], $$[$0])
break;
case 55:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOR_IGUAL_QUE,$$[$0-2], $$[$0])
break;
case 56:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAYOR_QUE,$$[$0-2], $$[$0])
break;
case 57:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAYOR_IGUAL_QUE,$$[$0-2], $$[$0])
break;
case 58:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.IGUAL,$$[$0-2], $$[$0])
break;
case 60:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAS,$$[$0-2], $$[$0])
break;
case 61:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOS,$$[$0-2], $$[$0])
break;
case 63:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.POR,$$[$0-2], $$[$0])
break;
case 64:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.DIVIDE,$$[$0-2], $$[$0])
break;
case 66:
this.$ = -$$[$0] 
break;
case 69:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.ENTERO)
break;
case 70:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.NUM_DECIMAL)
break;
case 71:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.CADENA)
break;
case 72:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.FALSE)
break;
case 73:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.TRUE)
break;
case 74:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.VARIABLE)
break;
case 75:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.LITERAL)
break;
case 76:
this.$ = $$[$0-1] 
break;
}
},
table: [{3:1,4:2,8:3,9:$V0},{1:[3]},{5:5,7:7,8:6,9:$V0,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,38:$V4},o($V5,[2,5]),{10:15,17:[1,16]},{6:[1,17],7:18,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,38:$V4},o($V5,[2,4]),o($V6,[2,3]),o($V6,[2,14]),{17:$V7,24:19,31:20},o($V6,[2,16]),{15:[1,22]},{28:[1,23]},{14:24,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{39:44,41:[1,47],51:[1,45],52:46},{11:[1,48],16:[1,49]},o($Vk,[2,9]),{1:[2,1]},o($V6,[2,2]),{15:[1,50],16:[1,51]},o($Vl,[2,22]),{13:[1,52]},o($V6,[2,17]),{14:54,17:$V8,28:$V9,29:53,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{33:[1,55],55:$Vm},{28:[1,57]},o($Vn,[2,48],{57:$Vo}),o($Vp,[2,50]),{17:$V8,28:$V9,41:$Va,54:$Vc,58:59,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o($Vp,[2,52],{13:[1,65],61:[1,60],63:[1,61],64:[1,62],65:[1,63],66:[1,64]}),o($Vq,[2,59],{67:$Vr,69:$Vs}),o($Vt,[2,62],{51:$Vu,71:$Vv}),o($Vw,[2,65]),{17:$V8,28:$V9,41:$Va,54:$Vc,72:70,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,72:71,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o($Vw,[2,68]),o($Vw,[2,69]),o($Vw,[2,70]),o($Vw,[2,71]),o($Vw,[2,72]),o($Vw,[2,73]),o($Vw,[2,74]),o($Vw,[2,75]),{14:72,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{40:[1,73]},{40:[2,42]},{16:[1,74],40:[2,43]},o($Vx,[2,45]),{12:75,18:[1,76],19:[1,77],20:[1,78],21:[1,79]},{17:[1,80]},o($V6,[2,15]),{17:$V7,31:81},{14:82,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{16:[1,84],30:[1,83]},o($Vy,[2,20],{55:$Vm}),{5:85,7:7,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,34:86,35:$Vz,36:$VA,37:$VB,38:$V4},{17:$V8,28:$V9,41:$Va,54:$Vc,56:89,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{54:[1,90]},{17:$V8,28:$V9,41:$Va,54:$Vc,58:91,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o($Vp,[2,51]),{17:$V8,28:$V9,41:$Va,54:$Vc,62:92,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,62:93,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,62:94,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,62:95,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,62:96,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,62:97,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,67:$Ve,68:98,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,67:$Ve,68:99,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,67:$Ve,69:$Vf,70:100,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{17:$V8,28:$V9,41:$Va,54:$Vc,67:$Ve,69:$Vf,70:101,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o($Vw,[2,66]),o($Vw,[2,67]),{30:[1,102],55:$Vm},{41:[1,103]},{41:[1,104]},{13:[1,105],15:[1,106]},o($VC,[2,10]),o($VC,[2,11]),o($VC,[2,12]),o($VC,[2,13]),o($Vk,[2,8]),o($Vl,[2,21]),o($Vl,[2,23],{55:$Vm}),{15:[1,107]},{14:108,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{7:18,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,34:109,35:$Vz,36:$VA,37:$VB,38:$V4},{35:[1,110]},{14:111,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{5:112,7:7,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,38:$V4},o($Vn,[2,47],{57:$Vo}),{30:[1,113]},o($Vp,[2,49]),o($Vq,[2,53],{67:$Vr,69:$Vs}),o($Vq,[2,54],{67:$Vr,69:$Vs}),o($Vq,[2,55],{67:$Vr,69:$Vs}),o($Vq,[2,56],{67:$Vr,69:$Vs}),o($Vq,[2,57],{67:$Vr,69:$Vs}),o($Vq,[2,58],{67:$Vr,69:$Vs}),o($Vt,[2,60],{51:$Vu,71:$Vv}),o($Vt,[2,61],{51:$Vu,71:$Vv}),o($Vw,[2,63]),o($Vw,[2,64]),o($Vw,[2,76]),{15:[2,33],42:114,43:115,44:116,45:117,46:[1,118],48:$VD,50:$VE},o($Vx,[2,44]),{14:121,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},o($V5,[2,7]),o($V6,[2,18]),o($Vy,[2,19],{55:$Vm}),{35:[1,122]},{32:[1,123]},{33:[1,124],55:$Vm},{7:18,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,35:[2,27],38:$V4},o($Vn,[2,46]),{15:[2,29]},{15:[2,30]},{15:[2,31]},{15:[2,32]},{14:125,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{14:126,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{14:127,17:$V8,28:$V9,41:$Va,53:$Vb,54:$Vc,56:26,58:27,59:$Vd,60:29,62:30,67:$Ve,68:31,69:$Vf,70:32,72:35,73:$Vg,74:$Vh,75:$Vi,76:$Vj},{15:[1,128],55:$Vm},{32:[1,129]},{15:[1,130]},{5:131,7:7,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,38:$V4},{15:[2,37],44:133,45:134,47:132,48:$VD,50:$VE,55:$Vm},{15:[2,38],55:$Vm},{15:[2,41],55:$Vm},o($V5,[2,6]),{15:[1,135]},o($V6,[2,25]),{7:18,22:8,23:$V1,25:10,26:11,27:$V2,32:$V3,34:136,35:$Vz,36:$VA,37:$VB,38:$V4},{15:[2,34]},{15:[2,35]},{15:[2,36]},o($V6,[2,24]),{35:[2,26]}],
defaultActions: {17:[2,1],45:[2,42],114:[2,29],115:[2,30],116:[2,31],117:[2,32],132:[2,34],133:[2,35],134:[2,36],136:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/
break;
case 1:/* ignore*/
break;
case 2:return 18;
break;
case 3:return 19;
break;
case 4:return 20;
break;
case 5:return 21;
break;
case 6:return 76;
break;
case 7:return 75;
break;
case 8:return 9;
break;
case 9:return 11;
break;
case 10:return 23;
break;
case 11:return 57;
break;
case 12:return 55;
break;
case 13:return 53;
break;
case 14:return 27;
break;
case 15:return 32;
break;
case 16:return 36;
break;
case 17:return 37;
break;
case 18:return 35;
break;
case 19:return 33;
break;
case 20:return 59;
break;
case 21:return 38;
break;
case 22:return 40;
break;
case 23:return 46;
break;
case 24:return 48;
break;
case 25:return 50;
break;
case 26:return 28;
break;
case 27:return 30;
break;
case 28:return 67;
break;
case 29:return 69;
break;
case 30:return 51;
break;
case 31:return 71;
break;
case 32:return 15;
break;
case 33:return `COMA`;
break;
case 34:return 61
break;
case 35:return 64;
break;
case 36:return 66;
break;
case 37:return 63;
break;
case 38:return 65;
break;
case 39:return 13;
break;
case 40:return 17;
break;
case 41:return 74;
break;
case 42:return 73;
break;
case 43: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 54; 
break;
case 45:
                          return 41;
                        
break;
case 46:
                        console.log('fin de archivo');
                        return "EOF";
                    
break;
case 47:
                        console.log(`Error lexico ${yy_.yytext}`);
                        return "INVALID";
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:(--.*))/,/^(?:INT\b)/,/^(?:DECIMAL\b)/,/^(?:TEXT\b)/,/^(?:BOOLEAN\b)/,/^(?:TRUE\b)/,/^(?:FALSE\b)/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:ELSEIF\b)/,/^(?:ELSE\b)/,/^(?:END\b)/,/^(?:THEN\b)/,/^(?:NOT\b)/,/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:LIMIT\b)/,/^(?:OFFSET\b)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:<>)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:(@[a-zA-Z][a-zA-Z0-9_]*))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:([0-9]+\b))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = minisql;
exports.Parser = minisql.Parser;
exports.parse = function () { return minisql.parse.apply(minisql, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}