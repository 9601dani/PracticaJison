/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var minisql = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,9],$V2=[1,11],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[2,9,23,27,32,38],$V7=[11,16],$V8=[6,23,27,32,35,36,37,38],$V9=[1,23],$Va=[1,46],$Vb=[1,43],$Vc=[1,45],$Vd=[1,44],$Ve=[1,27],$Vf=[1,40],$Vg=[1,30],$Vh=[1,36],$Vi=[1,35],$Vj=[1,38],$Vk=[1,39],$Vl=[1,41],$Vm=[1,42],$Vn=[15,16],$Vo=[1,59],$Vp=[15,16,30,33,47,48,53],$Vq=[1,61],$Vr=[15,16,30,33,47,48,53,55],$Vs=[13,15,16,30,33,47,48,53,55,59,61,62,63,64],$Vt=[1,69],$Vu=[1,70],$Vv=[13,15,16,30,33,47,48,53,55,59,61,62,63,64,65,67],$Vw=[1,71],$Vx=[1,72],$Vy=[13,15,16,30,33,47,48,49,53,55,59,61,62,63,64,65,67,69],$Vz=[16,40],$VA=[16,30],$VB=[2,31],$VC=[1,90],$VD=[1,91],$VE=[13,15],$VF=[15,47,48],$VG=[15,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inic":3,"declare_variables":4,"statements":5,"EOF":6,"state_op":7,"declare_prod":8,"DECLARE":9,"variablePro":10,"AS":11,"type":12,"IGUAL":13,"a":14,"PUNTO_COMA":15,"COMA":16,"VARIABLE":17,"INT":18,"DECIMAL":19,"TEXT":20,"BOOLEAN":21,"print_stmt":22,"SET":23,"set_stmt":24,"if_stmt":25,"select_stmt":26,"PRINT":27,"LPARENT":28,"expr":29,"RPARENT":30,"setPro":31,"IF":32,"THEN":33,"else_statement":34,"END":35,"ELSEIF":36,"ELSE":37,"SELECT":38,"name_select":39,"FROM":40,"LITERAL":41,"select":42,"where_pro":43,"limit_pro":44,"off_set_pro":45,"WHERE":46,"LIMIT":47,"OFFSET":48,"POR":49,"names_select":50,"INPUT":51,"CADENA":52,"OR":53,"b":54,"AND":55,"c":56,"NOT":57,"d":58,"NO_IGUAL":59,"e":60,"MENOR_QUE":61,"MENOR_IGUAL_QUE":62,"MAYOR_QUE":63,"MAYOR_IGUAL_QUE":64,"MAS":65,"f":66,"MENOS":67,"g":68,"DIVIDE":69,"h":70,"ENTERO":71,"NUM_DECIMAL":72,"FALSE":73,"TRUE":74,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",9:"DECLARE",11:"AS",13:"IGUAL",15:"PUNTO_COMA",16:"COMA",17:"VARIABLE",18:"INT",19:"DECIMAL",20:"TEXT",21:"BOOLEAN",23:"SET",27:"PRINT",28:"LPARENT",30:"RPARENT",32:"IF",33:"THEN",35:"END",36:"ELSEIF",37:"ELSE",38:"SELECT",40:"FROM",41:"LITERAL",46:"WHERE",47:"LIMIT",48:"OFFSET",49:"POR",51:"INPUT",52:"CADENA",53:"OR",55:"AND",57:"NOT",59:"NO_IGUAL",61:"MENOR_QUE",62:"MENOR_IGUAL_QUE",63:"MAYOR_QUE",64:"MAYOR_IGUAL_QUE",65:"MAS",67:"MENOS",69:"DIVIDE",71:"ENTERO",72:"NUM_DECIMAL",73:"FALSE",74:"TRUE"},
productions_: [0,[3,3],[5,2],[5,1],[5,1],[4,2],[4,1],[4,1],[8,7],[8,5],[10,3],[10,1],[10,0],[12,1],[12,1],[12,1],[12,1],[7,1],[7,3],[7,1],[7,2],[22,5],[29,3],[29,1],[24,3],[24,1],[31,3],[25,8],[25,7],[34,5],[34,2],[34,0],[26,5],[42,3],[43,2],[43,0],[44,2],[44,0],[45,2],[45,0],[39,1],[39,1],[50,3],[50,1],[14,4],[14,3],[14,1],[54,3],[54,1],[56,2],[56,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[60,3],[60,3],[60,1],[66,3],[66,3],[66,1],[68,2],[68,2],[68,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,3],[70,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
        this.$=$$[$0-2]; this.$.push(...$$[$0-1]); return this.$;
            for(let i=0;i<errores_lexicos.length;i++){
                 yy.MyErrorsMini.nuevoE(new yy.DefManageError(errores_lexicos[i].linea,errores_lexicos[i].columna,errores_lexicos[i].type,errores_lexicos[i].des))
              }
              errores_lexicos=[];
        
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 6:
 this.$ = []; this.$.push($$[$0])
break;
case 4:

                                                     yy.MyErrorsMini.nuevoE(new yy.DefManageError(this._$.first_line,this._$.first_column,"Sintactico"," se obtuvo "+ yytext +" pero no se esperaba"));
                                         
break;
case 5:
this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 7:

                                                 yy.MyErrorsMini.nuevoE(new yy.DefManageError(this._$.first_line,this._$.first_column,"Sintactico"," se obtuvo "+ yytext +" pero no se esperaba"));
                                     
break;
case 8:
 this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-5],$$[$0-1])
break;
case 9:
 this.$ = new yy.Declare(this._$.first_line,this._$.first_column,$$[$0-1],$$[$0-3])
break;
case 10:
this.$=$$[$0-2]; this.$.push($$[$0]);  
break;
case 11: case 23: case 25:
this.$=[]; this.$.push($$[$0]);
break;
case 13:
 this.$ = yy.VariableType.INT
break;
case 14:
 this.$ = yy.VariableType.DECIMAL
break;
case 15:
 this.$ = yy.VariableType.TEXT
break;
case 16:
 this.$ = yy.VariableType.BOOLEAN
break;
case 17: case 19: case 40: case 41: case 65:
this.$=$$[$0]
break;
case 18:
 this.$= new yy.Settear(this._$.first_line,this._$.first_column,$$[$0-1])
break;
case 20:
this.$=$$[$0-1]
break;
case 21:
this.$= new yy.Print(this._$.first_line,this._$.first_column,$$[$0-2])
break;
case 22:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 24:
 this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 26:
this.$= new yy.Assingment(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0])
break;
case 27:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-3])
break;
case 28:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-5],$$[$0-3])
break;
case 29:
this.$= new yy.IfState(this._$.first_line,this._$.first_column, $$[$0-3], $$[$0-1], $$[$0])
break;
case 30:
this.$= new yy.ElseState(this._$.first_line,this._$.first_column, $$[$0])
break;
case 32:
this.$= new yy.Select(this._$.first_line,this._$.first_column,$$[$0-3],$$[$0-1],$$[$0]);
break;
case 33:
this.$= new yy.ConditionSelect(this._$.first_line,this._$.first_column,$$[$0-2],$$[$0-1],$$[$0])
break;
case 34:
this.$= new yy.Where(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 36:
this.$= new yy.Limit(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 38:
this.$= new yy.OffSet(this._$.first_line,this._$.first_column,$$[$0]);
break;
case 42:
this.$=$$[$0-2]; this.$.push($$[$0])
break;
case 43:
this.$=[]; this.$.push($$[$0]) 
break;
case 44:
this.$= new yy.Input(this._$.first_line,this._$.first_column,$$[$0-1])
break;
case 45:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.OR,$$[$0-2], $$[$0])
break;
case 46: case 48:
 this.$ = $$[$0]; 
break;
case 47:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.AND,$$[$0-2], $$[$0])
break;
case 49:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.NOT,$$[$0],$$[$0])
break;
case 50: case 57: case 60: case 63: case 66:
 this.$= $$[$0]
break;
case 51:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.NO_IGUAL,$$[$0-2], $$[$0])
break;
case 52:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOR_QUE,$$[$0-2], $$[$0])
break;
case 53:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOR_IGUAL_QUE,$$[$0-2], $$[$0])
break;
case 54:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAYOR_QUE,$$[$0-2], $$[$0])
break;
case 55:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAYOR_IGUAL_QUE,$$[$0-2], $$[$0])
break;
case 56:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.IGUAL,$$[$0-2], $$[$0])
break;
case 58:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MAS,$$[$0-2], $$[$0])
break;
case 59:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.MENOS,$$[$0-2], $$[$0])
break;
case 61:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.POR,$$[$0-2], $$[$0])
break;
case 62:
this.$= new yy.OperacionBinaria(this._$.first_line,this._$.first_column,yy.OperationType.DIVIDE,$$[$0-2], $$[$0])
break;
case 64:
this.$ = -$$[$0] 
break;
case 67:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.ENTERO)
break;
case 68:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.NUM_DECIMAL)
break;
case 69:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.CADENA)
break;
case 70: case 71:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.BOOLEAN)
break;
case 72:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.VARIABLE)
break;
case 73:
this.$= new yy.Value(this._$.first_line,this._$.first_column,$$[$0],yy.ValueType.LITERAL)
break;
case 74:
this.$ = $$[$0-1] 
break;
case 75:

                                                         yy.MyErrorsMini.nuevoE(new yy.DefManageError(this._$.first_line,this._$.first_column,"Sintactico"," se obtuvo "+ yytext +" pero no se esperaba"));
                                             
break;
}
},
table: [{2:[1,4],3:1,4:2,8:3,9:$V0},{1:[3]},{2:$V1,5:6,7:8,8:7,9:$V0,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,38:$V5},o($V6,[2,6]),o($V6,[2,7]),o($V7,[2,12],{10:17,17:[1,18]}),{6:[1,19],7:20,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,38:$V5},o($V6,[2,5]),o($V8,[2,3]),o($V8,[2,4]),o($V8,[2,17]),{17:$V9,24:21,31:22},o($V8,[2,19]),{15:[1,24]},{28:[1,25]},{2:$Va,14:26,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{39:47,41:[1,50],49:[1,48],50:49},{11:[1,51],16:[1,52]},o($V7,[2,11]),{1:[2,1]},o($V8,[2,2]),{15:[1,53],16:[1,54]},o($Vn,[2,25]),{13:[1,55]},o($V8,[2,20]),{2:$Va,14:57,17:$Vb,28:$Vc,29:56,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{33:[1,58],53:$Vo},{28:[1,60]},o($Vp,[2,46],{55:$Vq}),o($Vr,[2,48]),{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,56:62,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($Vr,[2,50],{13:[1,68],59:[1,63],61:[1,64],62:[1,65],63:[1,66],64:[1,67]}),o($Vs,[2,57],{65:$Vt,67:$Vu}),o($Vv,[2,60],{49:$Vw,69:$Vx}),o($Vy,[2,63]),{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,70:73,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,70:74,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($Vy,[2,66]),o($Vy,[2,67]),o($Vy,[2,68]),o($Vy,[2,69]),o($Vy,[2,70]),o($Vy,[2,71]),o($Vy,[2,72]),o($Vy,[2,73]),{2:$Va,14:75,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($Vy,[2,75]),{40:[1,76]},{40:[2,40]},{16:[1,77],40:[2,41]},o($Vz,[2,43]),{12:78,18:[1,79],19:[1,80],20:[1,81],21:[1,82]},{17:[1,83]},o($V8,[2,18]),{17:$V9,31:84},{2:$Va,14:85,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{16:[1,87],30:[1,86]},o($VA,[2,23],{53:$Vo}),{2:$V1,5:88,7:8,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,34:89,35:$VB,36:$VC,37:$VD,38:$V5},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,54:92,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{52:[1,93]},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,56:94,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($Vr,[2,49]),{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:95,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:96,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:97,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:98,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:99,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,60:100,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,65:$Vh,66:101,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,65:$Vh,66:102,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,65:$Vh,67:$Vi,68:103,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$Va,17:$Vb,28:$Vc,41:$Vd,52:$Vf,65:$Vh,67:$Vi,68:104,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($Vy,[2,64]),o($Vy,[2,65]),{30:[1,105],53:$Vo},{41:[1,106]},{41:[1,107]},{13:[1,108],15:[1,109]},o($VE,[2,13]),o($VE,[2,14]),o($VE,[2,15]),o($VE,[2,16]),o($V7,[2,10]),o($Vn,[2,24]),o($Vn,[2,26],{53:$Vo}),{15:[1,110]},{2:$Va,14:111,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{7:20,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,34:112,35:$VB,36:$VC,37:$VD,38:$V5},{35:[1,113]},{2:$Va,14:114,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{2:$V1,5:115,7:8,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,38:$V5},o($Vp,[2,45],{55:$Vq}),{30:[1,116]},o($Vr,[2,47]),o($Vs,[2,51],{65:$Vt,67:$Vu}),o($Vs,[2,52],{65:$Vt,67:$Vu}),o($Vs,[2,53],{65:$Vt,67:$Vu}),o($Vs,[2,54],{65:$Vt,67:$Vu}),o($Vs,[2,55],{65:$Vt,67:$Vu}),o($Vs,[2,56],{65:$Vt,67:$Vu}),o($Vv,[2,58],{49:$Vw,69:$Vx}),o($Vv,[2,59],{49:$Vw,69:$Vx}),o($Vy,[2,61]),o($Vy,[2,62]),o($Vy,[2,74]),o($VF,[2,35],{42:117,43:118,46:[1,119]}),o($Vz,[2,42]),{2:$Va,14:120,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($V6,[2,9]),o($V8,[2,21]),o($VA,[2,22],{53:$Vo}),{35:[1,121]},{32:[1,122]},{33:[1,123],53:$Vo},{7:20,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,35:[2,30],38:$V5},o($Vp,[2,44]),{15:[2,32]},o($VG,[2,37],{44:124,47:[1,125]}),{2:$Va,14:126,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},{15:[1,127],53:$Vo},{32:[1,128]},{15:[1,129]},{2:$V1,5:130,7:8,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,38:$V5},{15:[2,39],45:131,48:[1,132]},{2:$Va,14:133,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($VF,[2,34],{53:$Vo}),o($V6,[2,8]),{15:[1,134]},o($V8,[2,28]),{7:20,22:10,23:$V2,25:12,26:13,27:$V3,32:$V4,34:135,35:$VB,36:$VC,37:$VD,38:$V5},{15:[2,33]},{2:$Va,14:136,17:$Vb,28:$Vc,41:$Vd,51:$Ve,52:$Vf,54:28,56:29,57:$Vg,58:31,60:32,65:$Vh,66:33,67:$Vi,68:34,70:37,71:$Vj,72:$Vk,73:$Vl,74:$Vm},o($VG,[2,36],{53:$Vo}),o($V8,[2,27]),{35:[2,29]},{15:[2,38],53:$Vo}],
defaultActions: {19:[2,1],48:[2,40],117:[2,32],131:[2,33],135:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let errores_lexicos=[];
  function addEr(linea, columna,simbolo){
    var n={
      linea: linea,
      columna:columna,
      type: "Lexico",
      des: "simbolo no reconocido => "+simbolo
    }
    errores_lexicos.push(n);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/
break;
case 1:/* ignore*/
break;
case 2:return 18;
break;
case 3:return 19;
break;
case 4:return 20;
break;
case 5:return 21;
break;
case 6:return 74;
break;
case 7:return 73;
break;
case 8:return 9;
break;
case 9:return 11;
break;
case 10:return 23;
break;
case 11:return 55;
break;
case 12:return 53;
break;
case 13:return 51;
break;
case 14:return 27;
break;
case 15:return 32;
break;
case 16:return 36;
break;
case 17:return 37;
break;
case 18:return 35;
break;
case 19:return 33;
break;
case 20:return 57;
break;
case 21:return 38;
break;
case 22:return 40;
break;
case 23:return 46;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 28;
break;
case 27:return 30;
break;
case 28:return 65;
break;
case 29:return 67;
break;
case 30:return 49;
break;
case 31:return 69;
break;
case 32:return 15;
break;
case 33:return `COMA`;
break;
case 34:return 59;
break;
case 35:return 64;
break;
case 36:return 62;
break;
case 37:return 61;
break;
case 38:return 63;
break;
case 39:return 13;
break;
case 40:return 17;
break;
case 41:return 72;
break;
case 42:return 71;
break;
case 43: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 52; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 52; 
break;
case 45:
                          return 41;
                        
break;
case 46:

                        return "EOF";
                    
break;
case 47:
                        addEr(yy_.yylloc.first_line, yy_.yylloc.first_column, yy_.yytext)
                         return 'INVALID';
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:(--.*))/,/^(?:INT\b)/,/^(?:DECIMAL\b)/,/^(?:TEXT\b)/,/^(?:BOOLEAN\b)/,/^(?:TRUE\b)/,/^(?:FALSE\b)/,/^(?:DECLARE\b)/,/^(?:AS\b)/,/^(?:SET\b)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:INPUT\b)/,/^(?:PRINT\b)/,/^(?:IF\b)/,/^(?:ELSEIF\b)/,/^(?:ELSE\b)/,/^(?:END\b)/,/^(?:THEN\b)/,/^(?:NOT\b)/,/^(?:SELECT\b)/,/^(?:FROM\b)/,/^(?:WHERE\b)/,/^(?:LIMIT\b)/,/^(?:OFFSET\b)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:<>)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:(@[a-zA-Z][a-zA-Z0-9_]*))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:([0-9]+\b))/,/^(?:("[^\"]*"))/,/^(?:('[^\']*'))/,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = minisql;
exports.Parser = minisql.Parser;
exports.parse = function () { return minisql.parse.apply(minisql, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}